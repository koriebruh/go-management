// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package dependency_injector

import (
	"github.com/go-playground/validator/v10"
	"github.com/google/wire"
	"gorm.io/gorm"
	"koriebruh/management/cnf"
	"koriebruh/management/controller"
	"koriebruh/management/repository"
	"koriebruh/management/service"
)

// Injectors from wire.go:

func InitializeAuth() (controller.AuthController, error) {
	db := ProvideDB()
	authRepositoryImpl := repository.NewAuthRepository()
	validate := ProvideValidator()
	authServiceImpl := service.NewAuthService(db, authRepositoryImpl, validate)
	authControllerImpl := controller.NewAuthController(authServiceImpl)
	return authControllerImpl, nil
}

func InitializeCategory() (controller.CategoryController, error) {
	db := ProvideDB()
	categoryRepositoryImpl := repository.NewCategoryRepository()
	validate := ProvideValidator()
	categoryServiceImpl := service.NewCategoryService(db, categoryRepositoryImpl, validate)
	categoryControllerImpl := controller.NewCategoryController(categoryServiceImpl)
	return categoryControllerImpl, nil
}

func InitializeItem() (controller.ItemController, error) {
	itemRepositoryImpl := repository.NewItemRepository()
	db := ProvideDB()
	validate := ProvideValidator()
	itemServiceImpl := service.NewItemService(itemRepositoryImpl, db, validate)
	itemControllerImpl := controller.NewItemController(itemServiceImpl)
	return itemControllerImpl, nil
}

func InitializeSupplier() (controller.SupplierController, error) {
	db := ProvideDB()
	supplierRepositoryImpl := repository.NewSupplierRepository()
	validate := ProvideValidator()
	supplierServiceImpl := service.NewSupplierService(db, supplierRepositoryImpl, validate)
	supplierControllerImpl := controller.NewSupplierController(supplierServiceImpl)
	return supplierControllerImpl, nil
}

// wire.go:

func ProvideDB() *gorm.DB {
	return cnf.InitDB()
}

func ProvideValidator() *validator.Validate {
	return validator.New()
}

var AuthSet = wire.NewSet(repository.NewAuthRepository, service.NewAuthService, controller.NewAuthController, wire.Bind(new(repository.AuthRepository), new(*repository.AuthRepositoryImpl)), wire.Bind(new(service.AuthService), new(*service.AuthServiceImpl)), wire.Bind(new(controller.AuthController), new(*controller.AuthControllerImpl)), ProvideDB,
	ProvideValidator,
)

var CategorySet = wire.NewSet(repository.NewCategoryRepository, service.NewCategoryService, controller.NewCategoryController, wire.Bind(new(repository.CategoryRepository), new(*repository.CategoryRepositoryImpl)), wire.Bind(new(service.CategoryService), new(*service.CategoryServiceImpl)), wire.Bind(new(controller.CategoryController), new(*controller.CategoryControllerImpl)), ProvideDB,
	ProvideValidator,
)

var ItemSet = wire.NewSet(repository.NewItemRepository, service.NewItemService, controller.NewItemController, wire.Bind(new(repository.ItemRepository), new(*repository.ItemRepositoryImpl)), wire.Bind(new(service.ItemService), new(*service.ItemServiceImpl)), wire.Bind(new(controller.ItemController), new(*controller.ItemControllerImpl)), ProvideDB,
	ProvideValidator,
)

var SupplierSet = wire.NewSet(repository.NewSupplierRepository, service.NewSupplierService, controller.NewSupplierController, wire.Bind(new(repository.SupplierRepository), new(*repository.SupplierRepositoryImpl)), wire.Bind(new(service.SupplierService), new(*service.SupplierServiceImpl)), wire.Bind(new(controller.SupplierController), new(*controller.SupplierControllerImpl)), ProvideDB,
	ProvideValidator,
)
